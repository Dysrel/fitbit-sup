import { me as appbit } from "appbit";
import { me as device } from "device";
import { display } from "display";
import asap from "fitbit-asap/app";
import { readFileSync, writeFileSync } from "fs";
var debug = true;
var tracking_id = null;
var data_source = null;
var user_language = null;
var custom_dimensions = [];
var custom_metrics = [];
var include_queue_time = "sometimes";
try {
    var client_id = readFileSync("_google_analytics_client_id", "cbor");
}
catch (error) {
    var client_id = Math.floor(Math.random() * 10000000000000000);
    writeFileSync("_google_analytics_client_id", client_id, "cbor");
}
var configure = function (options) {
    tracking_id = options.tracking_id || tracking_id;
    data_source = options.data_source || data_source;
    user_language = options.user_language || user_language;
    custom_dimensions = options.custom_dimensions || custom_dimensions;
    custom_metrics = options.custom_metrics || custom_metrics;
    include_queue_time = options.include_queue_time || include_queue_time;
    onload();
};
var send = function (options) {
    debug && console.log("App --> Companion");
    debug && console.log("Tracking ID: " + tracking_id);
    debug && console.log("Client ID: " + client_id);
    var data = options;
    data.tracking_id = tracking_id;
    data.client_id = client_id;
    data.data_source = data_source;
    data.user_language = user_language;
    data.include_queue_time = include_queue_time;
    data.screen_resolution = device.screen ? (device.screen.width + "x" + device.screen.height) : "348x250";
    data.timestamp = Date.now();
    data.custom_dimensions = options.custom_dimensions ? custom_dimensions.concat(options.custom_dimensions) : custom_dimensions;
    data.custom_metrics = options.custom_metrics ? custom_metrics.concat(options.custom_metrics) : custom_metrics;
    asap.send(data);
};
var onload = function () {
    send({
        hit_type: "event",
        event_category: "Lifecycle",
        event_action: "Load",
        event_label: "Load"
    });
};
display.addEventListener("change", function () {
    if (display.on) {
        send({
            hit_type: "event",
            event_category: "Display",
            event_action: "On",
            event_label: "Display On"
        });
    }
});
appbit.addEventListener("unload", function () {
    send({
        hit_type: "event",
        event_category: "Lifecycle",
        event_action: "Unload",
        event_label: "Unload"
    });
});
var analytics = {
    configure: configure,
    send: send
};
export default analytics;
//# sourceMappingURL=app.js.map