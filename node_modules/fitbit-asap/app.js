import * as tslib_1 from "tslib";
import { readFileSync, writeFileSync } from "fs";
import { peerSocket } from "messaging";
var debug = false;
var get_queue = function () {
    try {
        return readFileSync("_asap_queue", "cbor");
    }
    catch (error) {
        return [];
    }
};
var enqueue = function (data) {
    debug && console.log("Enqueue Message ID #" + data._asap_id);
    var queue = get_queue();
    queue.push(data);
    writeFileSync("_asap_queue", queue, "cbor");
    try {
        peerSocket.send(data);
    }
    catch (error) {
        debug && console.log(error);
    }
};
var dequeue = function (id) {
    debug && console.log("Dequeue Message ID #" + id);
    var queue = get_queue();
    for (var i in queue) {
        if (queue[i]._asap_id === id) {
            queue.splice(i);
            break;
        }
    }
    writeFileSync("_asap_queue", queue, "cbor");
};
var send = function (message, options) {
    var now = Date.now();
    options = options || {};
    options.timeout = options.timeout || 2592000000;
    var data = {
        _asap_id: Math.floor(Math.random() * 10000000000),
        _asap_created: now,
        _asap_expires: now + options.timeout,
        _asap_status: "sending",
        _asap_message: message
    };
    enqueue(data);
};
var send_all = function () {
    var e_1, _a;
    var queue = get_queue();
    try {
        for (var queue_1 = tslib_1.__values(queue), queue_1_1 = queue_1.next(); !queue_1_1.done; queue_1_1 = queue_1.next()) {
            var data = queue_1_1.value;
            try {
                peerSocket.send(data);
            }
            catch (error) {
                debug && console.log(error);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (queue_1_1 && !queue_1_1.done && (_a = queue_1.return)) _a.call(queue_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
};
setTimeout(function () {
    send_all();
}, 1000);
peerSocket.addEventListener("open", function () {
    send_all();
});
peerSocket.addEventListener("message", function (event) {
    var data = event.data;
    if (data._asap_id) {
        switch (data._asap_status) {
            case "sending":
                if (data._asap_id) {
                    try {
                        peerSocket.send({ _asap_status: "received", _asap_id: data._asap_id });
                        asap.onmessage(data._asap_message);
                    }
                    catch (error) {
                        debug && console.log(error);
                    }
                }
                break;
            case "received":
                dequeue(data._asap_id);
                break;
        }
    }
});
var asap = {
    send: send,
    onmessage: function () { }
};
export default asap;
//# sourceMappingURL=app.js.map